// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package bsst

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *BSSTHeader) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.Buckets (int64) (int64)
	if len("Buckets") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Buckets\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Buckets"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Buckets")); err != nil {
		return err
	}

	if t.Buckets >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Buckets)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Buckets-1)); err != nil {
			return err
		}
	}

	// t.BucketSize (int64) (int64)
	if len("BucketSize") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"BucketSize\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("BucketSize"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("BucketSize")); err != nil {
		return err
	}

	if t.BucketSize >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.BucketSize)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.BucketSize-1)); err != nil {
			return err
		}
	}

	// t.Entries (int64) (int64)
	if len("Entries") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Entries\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Entries"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Entries")); err != nil {
		return err
	}

	if t.Entries >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Entries)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Entries-1)); err != nil {
			return err
		}
	}

	// t.Salt ([32]uint8) (array)
	if len("Salt") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Salt\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Salt"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Salt")); err != nil {
		return err
	}

	if len(t.Salt) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Salt was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Salt))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Salt[:]); err != nil {
		return err
	}

	// t.Levels (int64) (int64)
	if len("Levels") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Levels\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Levels"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Levels")); err != nil {
		return err
	}

	if t.Levels >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Levels)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Levels-1)); err != nil {
			return err
		}
	}

	// t.LevelFactor (int64) (int64)
	if len("LevelFactor") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"LevelFactor\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("LevelFactor"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("LevelFactor")); err != nil {
		return err
	}

	if t.LevelFactor >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.LevelFactor)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.LevelFactor-1)); err != nil {
			return err
		}
	}

	// t.Finalized (bool) (bool)
	if len("Finalized") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Finalized\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Finalized"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Finalized")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Finalized); err != nil {
		return err
	}
	return nil
}

func (t *BSSTHeader) UnmarshalCBOR(r io.Reader) (err error) {
	*t = BSSTHeader{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("BSSTHeader: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Buckets (int64) (int64)
		case "Buckets":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Buckets = int64(extraI)
			}
			// t.BucketSize (int64) (int64)
		case "BucketSize":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.BucketSize = int64(extraI)
			}
			// t.Entries (int64) (int64)
		case "Entries":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Entries = int64(extraI)
			}
			// t.Salt ([32]uint8) (array)
		case "Salt":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Salt: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra != 32 {
				return fmt.Errorf("expected array to have 32 elements")
			}

			t.Salt = [32]uint8{}

			if _, err := io.ReadFull(cr, t.Salt[:]); err != nil {
				return err
			}
			// t.Levels (int64) (int64)
		case "Levels":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Levels = int64(extraI)
			}
			// t.LevelFactor (int64) (int64)
		case "LevelFactor":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.LevelFactor = int64(extraI)
			}
			// t.Finalized (bool) (bool)
		case "Finalized":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Finalized = false
			case 21:
				t.Finalized = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
