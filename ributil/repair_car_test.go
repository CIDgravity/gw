package ributil

import (
	"bytes"
	"github.com/ipfs/go-cid"
	"github.com/stretchr/testify/require"
	"golang.org/x/xerrors"
	"io"
	"testing"
)

/*
echo "natmoiunoeutmi" | ipfs add --raw-leaves
# Output: added bafkreidqw5niodrmt5nza7on5f7mmjx4vymbiwmxamd4nihtoldyviioxu

echo "etominpcyomdrpycmx" | ipfs add --raw-leaves
# Output: added bafkreibn4ktninvehj4iwerimg45kyo2h3wj5tcn53wjwhfeez4wyih7xq

echo ".rpyhlxmbl.crxf." | ipfs add --raw-leaves
# Output: added bafkreibftlukrlh3iapgjmcemz4gom4s4fpli6tqjggor3pbhdrgfpipl4

echo "crp.ydrcbd.py" | ipfs add --raw-leaves
# Output: added bafkreifgh655vcevj45q7uqpftwzy7ubfqkpwvh77enfrnaxac5t4gro5q

# Commands to create DAG nodes
ipfs dag put --input-codec=dag-json <<< '[{"/": "bafkreidqw5niodrmt5nza7on5f7mmjx4vymbiwmxamd4nihtoldyviioxu"}, {"/": "bafkreibn4ktninvehj4iwerimg45kyo2h3wj5tcn53wjwhfeez4wyih7xq"}]'
# Output: bafyreielemrpjfp3tqlperrfcdtqp2kjranb34tpnwjc5ir5x7rjm7pevy

ipfs dag put --input-codec=dag-json <<< '[{"/": "bafkreibftlukrlh3iapgjmcemz4gom4s4fpli6tqjggor3pbhdrgfpipl4"}, {"/": "bafkreifgh655vcevj45q7uqpftwzy7ubfqkpwvh77enfrnaxac5t4gro5q"}]'
# Output: bafyreidzjgmslbs4fw45ymtagkxnffdeiag4w6477h6iwb6bz2kovjpcpm

ipfs dag put --input-codec=dag-json <<< '[{"/": "bafyreielemrpjfp3tqlperrfcdtqp2kjranb34tpnwjc5ir5x7rjm7pevy"}, {"/": "bafyreidzjgmslbs4fw45ymtagkxnffdeiag4w6477h6iwb6bz2kovjpcpm"}]'
# Output: bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a

# Command to export data from the DAG
ipfs dag export bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a
*/
var testCar = []byte{
	0x3a, 0xa2, 0x65, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x81, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01, 0x71,
	0x12, 0x20, 0xde, 0xf8, 0xde, 0xac, 0x8a, 0x7d, 0x1a, 0xeb, 0xe0, 0xb9, 0xee, 0x09, 0x26, 0x8f,
	0xea, 0x73, 0x9e, 0x03, 0x69, 0xe0, 0xde, 0xdd, 0xcf, 0xae, 0xc1, 0xc0, 0x6e, 0xe7, 0xf4, 0x7c,
	0x09, 0xd0, 0x67, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x01, 0x77, 0x01, 0x71, 0x12, 0x20,
	0xde, 0xf8, 0xde, 0xac, 0x8a, 0x7d, 0x1a, 0xeb, 0xe0, 0xb9, 0xee, 0x09, 0x26, 0x8f, 0xea, 0x73,
	0x9e, 0x03, 0x69, 0xe0, 0xde, 0xdd, 0xcf, 0xae, 0xc1, 0xc0, 0x6e, 0xe7, 0xf4, 0x7c, 0x09, 0xd0,
	0x82, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01, 0x71, 0x12, 0x20, 0x8b, 0x23, 0x22, 0xf4, 0x95, 0xfb,
	0x9c, 0x16, 0xf2, 0x46, 0x25, 0x10, 0xe7, 0x07, 0xe9, 0x49, 0x88, 0x1a, 0x1d, 0xf2, 0x6f, 0x6d,
	0x92, 0x2e, 0xa2, 0x3d, 0xbf, 0xe2, 0x96, 0x7d, 0xe4, 0xae, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01,
	0x71, 0x12, 0x20, 0x79, 0x49, 0x99, 0x25, 0x86, 0x5c, 0x2d, 0xb9, 0xdc, 0x32, 0x60, 0x32, 0xae,
	0xd2, 0x94, 0x64, 0x40, 0x0d, 0xcb, 0x7b, 0x9f, 0xf9, 0xfc, 0x8b, 0x07, 0xc1, 0xce, 0x94, 0xea,
	0xa5, 0xe2, 0x7b, 0x77, 0x01, 0x71, 0x12, 0x20, 0x8b, 0x23, 0x22, 0xf4, 0x95, 0xfb, 0x9c, 0x16,
	0xf2, 0x46, 0x25, 0x10, 0xe7, 0x07, 0xe9, 0x49, 0x88, 0x1a, 0x1d, 0xf2, 0x6f, 0x6d, 0x92, 0x2e,
	0xa2, 0x3d, 0xbf, 0xe2, 0x96, 0x7d, 0xe4, 0xae, 0x82, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01, 0x55,
	0x12, 0x20, 0x70, 0xb7, 0x5a, 0x87, 0x0e, 0x2c, 0x9f, 0x5b, 0x90, 0x7d, 0xcd, 0xe9, 0x7e, 0xc6,
	0x26, 0xfc, 0xae, 0x18, 0x14, 0x59, 0x97, 0x03, 0x07, 0xc6, 0xa0, 0xf3, 0x72, 0xc7, 0x8a, 0xa1,
	0x0e, 0xbd, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01, 0x55, 0x12, 0x20, 0x2d, 0xe2, 0xa6, 0xd4, 0x36,
	0xa4, 0x3a, 0x78, 0x8b, 0x12, 0x28, 0x61, 0xb9, 0xd5, 0x61, 0xda, 0x3e, 0xec, 0x9e, 0xcc, 0x4d,
	0xee, 0xec, 0x9b, 0x1c, 0xa4, 0x26, 0x79, 0x6c, 0x20, 0xff, 0xbc, 0x33, 0x01, 0x55, 0x12, 0x20,
	0x70, 0xb7, 0x5a, 0x87, 0x0e, 0x2c, 0x9f, 0x5b, 0x90, 0x7d, 0xcd, 0xe9, 0x7e, 0xc6, 0x26, 0xfc,
	0xae, 0x18, 0x14, 0x59, 0x97, 0x03, 0x07, 0xc6, 0xa0, 0xf3, 0x72, 0xc7, 0x8a, 0xa1, 0x0e, 0xbd,
	0x6e, 0x61, 0x74, 0x6d, 0x6f, 0x69, 0x75, 0x6e, 0x6f, 0x65, 0x75, 0x74, 0x6d, 0x69, 0x0a, 0x37,
	0x01, 0x55, 0x12, 0x20, 0x2d, 0xe2, 0xa6, 0xd4, 0x36, 0xa4, 0x3a, 0x78, 0x8b, 0x12, 0x28, 0x61,
	0xb9, 0xd5, 0x61, 0xda, 0x3e, 0xec, 0x9e, 0xcc, 0x4d, 0xee, 0xec, 0x9b, 0x1c, 0xa4, 0x26, 0x79,
	0x6c, 0x20, 0xff, 0xbc, 0x65, 0x74, 0x6f, 0x6d, 0x69, 0x6e, 0x70, 0x63, 0x79, 0x6f, 0x6d, 0x64,
	0x72, 0x70, 0x79, 0x63, 0x6d, 0x78, 0x0a, 0x77, 0x01, 0x71, 0x12, 0x20, 0x79, 0x49, 0x99, 0x25,
	0x86, 0x5c, 0x2d, 0xb9, 0xdc, 0x32, 0x60, 0x32, 0xae, 0xd2, 0x94, 0x64, 0x40, 0x0d, 0xcb, 0x7b,
	0x9f, 0xf9, 0xfc, 0x8b, 0x07, 0xc1, 0xce, 0x94, 0xea, 0xa5, 0xe2, 0x7b, 0x82, 0xd8, 0x2a, 0x58,
	0x25, 0x00, 0x01, 0x55, 0x12, 0x20, 0x25, 0x9a, 0xe8, 0xa8, 0xac, 0xfb, 0x40, 0x1e, 0x64, 0xb0,
	0x44, 0x66, 0x78, 0x67, 0x33, 0x92, 0xe1, 0x5e, 0xb4, 0x7a, 0x70, 0x49, 0x8c, 0xe8, 0xed, 0xe1,
	0x38, 0xe2, 0x62, 0xbd, 0x0f, 0x5f, 0xd8, 0x2a, 0x58, 0x25, 0x00, 0x01, 0x55, 0x12, 0x20, 0xa6,
	0x3f, 0xbb, 0xda, 0x88, 0x95, 0x4f, 0x3b, 0x0f, 0xd2, 0x0f, 0x2c, 0xed, 0x9c, 0x7e, 0x81, 0x2c,
	0x14, 0xfb, 0x54, 0xff, 0xf9, 0x1a, 0x58, 0xb4, 0x17, 0x00, 0xbb, 0x3e, 0x1a, 0x2e, 0xec, 0x35,
	0x01, 0x55, 0x12, 0x20, 0x25, 0x9a, 0xe8, 0xa8, 0xac, 0xfb, 0x40, 0x1e, 0x64, 0xb0, 0x44, 0x66,
	0x78, 0x67, 0x33, 0x92, 0xe1, 0x5e, 0xb4, 0x7a, 0x70, 0x49, 0x8c, 0xe8, 0xed, 0xe1, 0x38, 0xe2,
	0x62, 0xbd, 0x0f, 0x5f, 0x2e, 0x72, 0x70, 0x79, 0x68, 0x6c, 0x78, 0x6d, 0x62, 0x6c, 0x2e, 0x63,
	0x72, 0x78, 0x66, 0x2e, 0x0a, 0x32, 0x01, 0x55, 0x12, 0x20, 0xa6, 0x3f, 0xbb, 0xda, 0x88, 0x95,
	0x4f, 0x3b, 0x0f, 0xd2, 0x0f, 0x2c, 0xed, 0x9c, 0x7e, 0x81, 0x2c, 0x14, 0xfb, 0x54, 0xff, 0xf9,
	0x1a, 0x58, 0xb4, 0x17, 0x00, 0xbb, 0x3e, 0x1a, 0x2e, 0xec, 0x63, 0x72, 0x70, 0x2e, 0x79, 0x64,
	0x72, 0x63, 0x62, 0x64, 0x2e, 0x70, 0x79, 0x0a,
}

func TestRepairCarLog(t *testing.T) {
	rc, err := cid.Parse("bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a")
	if err != nil {
		t.Fatal(err)
	}

	rr, err := NewCarRepairReader(bytes.NewReader(testCar), rc, nil)
	if err != nil {
		t.Fatal(err)
	}

	d, err := io.ReadAll(rr)
	require.NoError(t, err)
	require.Equal(t, testCar, d)
}

func TestRepairCarBitFlipData(t *testing.T) {
	rc, err := cid.Parse("bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a")
	if err != nil {
		t.Fatal(err)
	}

	tcCopy := make([]byte, len(testCar))
	copy(tcCopy, testCar)
	tcCopy[len(tcCopy)-1] ^= 0x01

	rr, err := NewCarRepairReader(bytes.NewReader(tcCopy), rc, func(c cid.Cid) ([]byte, error) {
		if c.String() != "bafkreifgh655vcevj45q7uqpftwzy7ubfqkpwvh77enfrnaxac5t4gro5q" {
			return nil, xerrors.Errorf("unexpected cid: %s", c)
		}

		return []byte("crp.ydrcbd.py\n"), nil
	})
	if err != nil {
		t.Fatal(err)
	}

	d, err := io.ReadAll(rr)
	require.NoError(t, err)
	require.Equal(t, testCar, d)
}

func TestRepairCarBitFlipCID(t *testing.T) {
	rc, err := cid.Parse("bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a")
	if err != nil {
		t.Fatal(err)
	}

	lastBlkOff := len("crp.ydrcbd.py\n") + 10

	tcCopy := make([]byte, len(testCar))
	copy(tcCopy, testCar)
	tcCopy[len(tcCopy)-lastBlkOff] ^= 0x01

	rr, err := NewCarRepairReader(bytes.NewReader(tcCopy), rc, func(c cid.Cid) ([]byte, error) {
		if c.String() != "bafkreifgh655vcevj45q7uqpftwzy7ubfqkpwvh77enfrnaxac5t4gro5q" {
			return nil, xerrors.Errorf("unexpected cid: %s", c)
		}

		return []byte("crp.ydrcbd.py\n"), nil
	})
	if err != nil {
		t.Fatal(err)
	}

	d, err := io.ReadAll(rr)
	require.NoError(t, err)
	require.Equal(t, testCar, d)
}

func TestRepairCarBitFlipLen(t *testing.T) {
	rc, err := cid.Parse("bafyreig67dpkzct5dlv6bopobeti72tttybwtyg63xh25qoan3t7i7aj2a")
	if err != nil {
		t.Fatal(err)
	}

	lastBlkOff := len("crp.ydrcbd.py\n") + rc.ByteLen() + 1

	tcCopy := make([]byte, len(testCar))
	copy(tcCopy, testCar)
	tcCopy[len(tcCopy)-lastBlkOff] ^= 0x01

	rr, err := NewCarRepairReader(bytes.NewReader(tcCopy), rc, func(c cid.Cid) ([]byte, error) {
		if c.String() != "bafkreifgh655vcevj45q7uqpftwzy7ubfqkpwvh77enfrnaxac5t4gro5q" {
			return nil, xerrors.Errorf("unexpected cid: %s", c)
		}

		return []byte("crp.ydrcbd.py\n"), nil
	})
	if err != nil {
		t.Fatal(err)
	}

	d, err := io.ReadAll(rr)
	require.NoError(t, err)
	require.Equal(t, testCar, d)
}
