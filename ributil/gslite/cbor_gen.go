// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package gslite

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *GraphSyncMessageRoot) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.Gs2 (gslite.GraphSyncMessage) (struct)
	if len("gs2") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"gs2\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("gs2"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("gs2")); err != nil {
		return err
	}

	if err := t.Gs2.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *GraphSyncMessageRoot) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncMessageRoot{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncMessageRoot: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Gs2 (gslite.GraphSyncMessage) (struct)
		case "gs2":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}
					t.Gs2 = new(GraphSyncMessage)
					if err := t.Gs2.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling t.Gs2 pointer: %w", err)
					}
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *GraphSyncMessage) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.Blocks ([]gslite.GraphSyncBlock) (slice)
	if len("blk") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"blk\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("blk"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("blk")); err != nil {
		return err
	}

	if len(t.Blocks) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Blocks was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Blocks))); err != nil {
		return err
	}
	for _, v := range t.Blocks {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Requests ([]gslite.GraphSyncRequest) (slice)
	if len("req") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"req\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("req"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("req")); err != nil {
		return err
	}

	if len(t.Requests) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Requests was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Requests))); err != nil {
		return err
	}
	for _, v := range t.Requests {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Responses ([]gslite.GraphSyncResponse) (slice)
	if len("rsp") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"rsp\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("rsp"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("rsp")); err != nil {
		return err
	}

	if len(t.Responses) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Responses was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Responses))); err != nil {
		return err
	}
	for _, v := range t.Responses {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *GraphSyncMessage) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncMessage{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncMessage: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Blocks ([]gslite.GraphSyncBlock) (slice)
		case "blk":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Blocks: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Blocks = make([]GraphSyncBlock, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v GraphSyncBlock
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Blocks[i] = v
			}

			// t.Requests ([]gslite.GraphSyncRequest) (slice)
		case "req":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Requests: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Requests = make([]GraphSyncRequest, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v GraphSyncRequest
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Requests[i] = v
			}

			// t.Responses ([]gslite.GraphSyncResponse) (slice)
		case "rsp":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Responses: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Responses = make([]GraphSyncResponse, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v GraphSyncResponse
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Responses[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *GraphSyncRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.Id ([]uint8) (slice)
	if len("id") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"id\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("id"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("id")); err != nil {
		return err
	}

	if len(t.Id) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Id was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Id))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Id[:]); err != nil {
		return err
	}

	// t.Priority (int64) (int64)
	if len("pri") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"pri\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("pri"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("pri")); err != nil {
		return err
	}

	if t.Priority >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Priority)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Priority-1)); err != nil {
			return err
		}
	}

	// t.Selector (typegen.Deferred) (struct)
	if len("sel") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sel\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("sel"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sel")); err != nil {
		return err
	}

	if err := t.Selector.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.Root (cid.Cid) (struct)
	if len("root") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"root\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("root"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("root")); err != nil {
		return err
	}

	if t.Root == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.Root); err != nil {
			return xerrors.Errorf("failed to write cid field t.Root: %w", err)
		}
	}

	// t.RequestType (gslite.RequestType) (string)
	if len("type") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"type\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("type"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("type")); err != nil {
		return err
	}

	if len(t.RequestType) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.RequestType was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.RequestType))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.RequestType)); err != nil {
		return err
	}
	return nil
}

func (t *GraphSyncRequest) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncRequest{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncRequest: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Id ([]uint8) (slice)
		case "id":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Id: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Id = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Id[:]); err != nil {
				return err
			}
			// t.Priority (int64) (int64)
		case "pri":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Priority = int64(extraI)
			}
			// t.Selector (typegen.Deferred) (struct)
		case "sel":

			{

				t.Selector = new(cbg.Deferred)

				if err := t.Selector.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("failed to read deferred field: %w", err)
				}
			}
			// t.Root (cid.Cid) (struct)
		case "root":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.Root: %w", err)
					}

					t.Root = &c
				}

			}
			// t.RequestType (gslite.RequestType) (string)
		case "type":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.RequestType = RequestType(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *GraphSyncResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.Metadata ([]gslite.GraphSyncLinkMetadatum) (slice)
	if len("meta") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"meta\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("meta"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("meta")); err != nil {
		return err
	}

	if len(t.Metadata) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Metadata was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Metadata))); err != nil {
		return err
	}
	for _, v := range t.Metadata {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}

	// t.Status (gslite.ResponseStatusCode) (int64)
	if len("stat") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"stat\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("stat"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("stat")); err != nil {
		return err
	}

	if t.Status >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Status)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Status-1)); err != nil {
			return err
		}
	}

	// t.Id ([]uint8) (slice)
	if len("reqid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"reqid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("reqid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("reqid")); err != nil {
		return err
	}

	if len(t.Id) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Id was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Id))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Id[:]); err != nil {
		return err
	}
	return nil
}

func (t *GraphSyncResponse) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncResponse{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncResponse: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Metadata ([]gslite.GraphSyncLinkMetadatum) (slice)
		case "meta":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Metadata: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Metadata = make([]GraphSyncLinkMetadatum, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v GraphSyncLinkMetadatum
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.Metadata[i] = v
			}

			// t.Status (gslite.ResponseStatusCode) (int64)
		case "stat":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative overflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Status = ResponseStatusCode(extraI)
			}
			// t.Id ([]uint8) (slice)
		case "reqid":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Id: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Id = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Id[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *GraphSyncBlock) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Data ([]uint8) (slice)
	if len("data") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"data\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("data"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("data")); err != nil {
		return err
	}

	if len(t.Data) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Data was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Data))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Data[:]); err != nil {
		return err
	}

	// t.Prefix ([]uint8) (slice)
	if len("prefix") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"prefix\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("prefix"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("prefix")); err != nil {
		return err
	}

	if len(t.Prefix) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Prefix was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Prefix))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Prefix[:]); err != nil {
		return err
	}
	return nil
}

func (t *GraphSyncBlock) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncBlock{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncBlock: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Data ([]uint8) (slice)
		case "data":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Data: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Data = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Data[:]); err != nil {
				return err
			}
			// t.Prefix ([]uint8) (slice)
		case "prefix":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Prefix: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Prefix = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Prefix[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *GraphSyncLinkMetadatum) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Link (cid.Cid) (struct)
	if len("link") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"link\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("link"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("link")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Link); err != nil {
		return xerrors.Errorf("failed to write cid field t.Link: %w", err)
	}

	// t.Action (string) (string)
	if len("action") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"action\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("action"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("action")); err != nil {
		return err
	}

	if len(t.Action) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Action was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Action))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Action)); err != nil {
		return err
	}
	return nil
}

func (t *GraphSyncLinkMetadatum) UnmarshalCBOR(r io.Reader) (err error) {
	*t = GraphSyncLinkMetadatum{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("GraphSyncLinkMetadatum: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Link (cid.Cid) (struct)
		case "link":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Link: %w", err)
				}

				t.Link = c

			}
			// t.Action (string) (string)
		case "action":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Action = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
